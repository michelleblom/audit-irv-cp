----------------------------------------------------------------------------
RAIRE: Risk-limiting Audits for Instant Runoff vote Elections
----------------------------------------------------------------------------

We have adapted Philip Stark's comparison audits (for first past the 
post elections) to IRV. The code in this repository is designed to be used for
generating audit configurations for multiple IRV elections. 

----------------------------------------------------------------------------
How to use this tool for generating an audit configuration (in JSON format).
----------------------------------------------------------------------------

1. Compile (if using Linux, you can probably use the provided Makefile,
otherwise you will likely need to write a custom Makefile).

2. To generate an audit with a risk limit of 5%, run the command: 

./irvaudit -rep_ballots REPORTED_BALLOT_FILE -r 0.05  
    -agap 0.005 -alglog -simlog -json OUTPUT_AUDIT_SPEC.json

Note that the audit configuration produced can be used in an audit with any
desired risk limit -- the audit will just involve more/less ballot polls than
estimated by the software. The 'alglog' and 'simlog' parameters, if provided,
will simply print the current status of the algorithm as it progresses. They
are not necessary, but useful. 

The 'agap' parameter controls the degree of 'suboptimality' you are willing to
accept in your audit configuration. The software is designed to produce a
series of assertions that, with the given parameters (risk limit), requires the
least number of estimated ballot polls to audit.  Depending on the election,
the algorithm may take longer than you would like to find the optimal set of
assertions (it also has to prove that these are optimal). With agap = 0.005, we
are saying that the configuration found can be 0.5% away from optimal, or
require 0.5% more auditing effort than the optimal audit. Increasing it should
make audit generation quicker. The default is 0.005, so you can leave off this
flag if you want to keep it at this value. 

A concrete example you can run:

./irvaudit -rep_ballots USIRV/Aspen_2009.raire -r 0.05  
    -agap 0.005 -alglog -simlog -json Aspen_2009.json

In the folder SampleOutputs, I have run the above on each of the USIRV
'reported' ballot data files in USIRV and placed the resulting JSON output. 
 
A concrete example for the 2019 San Francisco preliminary results is:
./irvaudit -rep_ballots USIRV/SFDA_2019_Nov8Partial.raire -r 0.05 -agap 0.005 -alglog -simlog -json SFDA_2019_Nov8Partial.json

which should match the equivalent file in USIRV. 

 
Note that:

-- Add the flag -contests N C1 C2 C3 ... to the run command to select which
contests, mentioned in the input data, you want to generate audits for.

N refers to the number of contests you want to audit.
C1, C2, ... are the IDs of these contests.

If you do not include the -contests flag, an audit will be generated for
each contest mentioned in the input data. The output log will indicate
which contests an audit was generated for, and if any contests require 
a full recount. For the latter contests, an audit configuration is not
included in the JSON output.
